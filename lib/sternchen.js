// Generated by CoffeeScript 1.9.3

/*
    custom actano reporter (derived from the mocha tap reporter)
 */

(function() {
  var CLASS_NAME, MAKE_TARGET, PREFIX, REPORT_FILE, ReportWriter, Sternchen, exit, fs, mkdirp, path, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('chai').Assertion.includeStack = true;

  fs = require('fs');

  mkdirp = require('mkdirp');

  path = require('path');

  exit = process.exit;

  ref = process.env, REPORT_FILE = ref.REPORT_FILE, PREFIX = ref.PREFIX, MAKE_TARGET = ref.MAKE_TARGET, CLASS_NAME = ref.CLASS_NAME;

  if (CLASS_NAME == null) {
    CLASS_NAME = REPORT_FILE;
  }

  if ((PREFIX != null) && (REPORT_FILE != null)) {
    REPORT_FILE = path.join(PREFIX, REPORT_FILE);
  }

  ReportWriter = (function() {
    function ReportWriter() {}

    ReportWriter.prototype.write = function(str) {
      var buf;
      if (this.fd != null) {
        if (typeof phantom !== "undefined" && phantom !== null) {
          return this.fd.write(str);
        } else {
          buf = new Buffer(str);
          return fs.writeSync(this.fd, buf, 0, buf.length, null);
        }
      }
    };

    ReportWriter.prototype.htmlEscape = function(str) {
      return String(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    };

    ReportWriter.prototype.createReportFile = function() {
      var directory;
      if ((REPORT_FILE != null) && REPORT_FILE.length > 0) {
        directory = path.dirname(REPORT_FILE);
        mkdirp.sync(directory);
        this["package"] = path.join(path.dirname(REPORT_FILE), path.basename(REPORT_FILE, path.extname(REPORT_FILE))).replace(/\//g, '.');
        this.tempFile = REPORT_FILE + '.tmp';
        this.fd = fs.openSync(this.tempFile, 'w');
        return this.write('<testsuites name="Mocha Tests">\n');
      }
    };

    ReportWriter.prototype.closeReportFile = function() {
      if (this.fd != null) {
        this.write('</testsuites>');
        fs.closeSync(this.fd);
        if (fs.renameSync != null) {
          return fs.renameSync(this.tempFile, REPORT_FILE);
        } else {
          if (fs.exists(REPORT_FILE)) {
            fs.remove(REPORT_FILE);
          }
          return fs.move(this.tempFile, REPORT_FILE);
        }
      }
    };

    return ReportWriter;

  })();

  Sternchen = (function(superClass) {
    extend(Sternchen, superClass);

    function Sternchen(runner) {
      this.runner = runner;
      this.endSuite = bind(this.endSuite, this);
      this.stats = {
        suites: 0,
        tests: 0,
        passes: 0,
        pending: 0,
        failures: 0
      };
      this.runner.stats = this.stats;
      this.initalizeEvents();
      this.tests = [];
    }

    Sternchen.prototype.endSuite = function() {
      var duration, i, len, ref1, ref2, ref3, test;
      duration = new Date - this.stats.start;
      this.write('<testsuite');
      this.write(' name="' + this["package"] + '"');
      this.write(' tests="' + this.tests.length + '"');
      this.write(' failures="' + this.stats.failures + '"');
      this.write(' skipped="' + (this.tests.length - this.stats.failures - this.stats.passes) + '"');
      this.write(' timestamp="' + this.stats.start.toUTCString() + '"');
      this.write(' make_target="' + this.htmlEscape(MAKE_TARGET) + '"');
      this.write(' time="' + (duration / 1000) + '">\n');
      ref1 = this.tests;
      for (i = 0, len = ref1.length; i < len; i++) {
        test = ref1[i];
        this.write('<testcase');
        this.write(' classname="' + this["package"] + '"');
        this.write(' name="' + this.htmlEscape(test.parent.fullTitle() + ' ' + test.title) + '"');
        if (!test.skipped) {
          this.write(' time="' + (test.duration / 1000) + '"');
        }
        this.write('>\n');
        if (test.stdout != null) {
          this.write('<system-out>\n');
          this.write('<![CDATA[');
          this.write(test.stdout);
          this.write(']]>\n');
          this.write('</system-out>\n');
        }
        if (test.state === "failed") {
          this.write('<failure message="');
          if (((ref2 = test.err) != null ? ref2.message : void 0) != null) {
            this.write(this.htmlEscape(test.err.message));
          } else {
            this.write('unknown error');
          }
          this.write('">\n');
          if (((ref3 = test.err) != null ? ref3.stack : void 0) != null) {
            this.write(this.htmlEscape(test.err.stack.replace(/^/gm, '  ')));
          }
          this.write('\n</failure>\n');
          this.write('</testcase>\n');
        } else {
          if (test.skipped) {
            this.write('<skipped/>\n');
            this.write('</testcase>\n');
          } else {
            this.write('</testcase>\n');
          }
        }
      }
      return this.write('</testsuite>\n');
    };

    Sternchen.prototype.addTest = function(test) {
      this.stats.tests++;
      return this.tests.push(test);
    };

    Sternchen.prototype.initalizeEvents = function() {
      this.runner.on('start', (function(_this) {
        return function() {
          var total;
          _this.createReportFile();
          _this.stats.start = new Date;
          total = _this.runner.grepTotal(_this.runner.suite);
          return console.log('%d..%d', 1, total);
        };
      })(this));
      this.runner.on('pending', (function(_this) {
        return function(test) {
          _this.addTest(test);
          _this.stats.pending++;
          test.skipped = true;
          return console.log('ok %d %s # SKIP -', _this.stats.tests + 1, _this.title(test));
        };
      })(this));
      this.runner.on('pass', (function(_this) {
        return function(test) {
          _this.addTest(test);
          _this.stats.passes++;
          return console.log('ok %d %s', _this.stats.tests + 1, _this.title(test));
        };
      })(this));
      this.runner.on('fail', (function(_this) {
        return function(test, err) {
          var failureHandler, i, len, ref1, ref2;
          if ((ref1 = test.onFailureHandlers) != null ? ref1.length : void 0) {
            if (test.stdout == null) {
              test.stdout = '';
            }
            ref2 = test.onFailureHandlers;
            for (i = 0, len = ref2.length; i < len; i++) {
              failureHandler = ref2[i];
              test.stdout += failureHandler(path.dirname(REPORT_FILE));
            }
          }
          _this.addTest(test);
          test.err = err;
          _this.stats.failures++;
          console.log('mocha not ok %d %s', _this.stats.tests, _this.title(test));
          if (err.stack) {
            return console.log(err.stack.replace(/^/gm, '  '));
          }
        };
      })(this));
      return this.runner.on('end', (function(_this) {
        return function() {
          _this.stats.end = new Date;
          _this.stats.duration = _this.stats.end - _this.stats.start;
          _this.endSuite();
          _this.closeReportFile();
          console.log('# tests ' + (_this.stats.passes + _this.stats.failures));
          console.log('# pass ' + _this.stats.passes);
          return console.log('# fail ' + _this.stats.failures);
        };
      })(this));
    };

    Sternchen.prototype.title = function(test) {
      return test.parent.fullTitle() + " : " + test.title;
    };

    return Sternchen;

  })(ReportWriter);

  module.exports = Sternchen;

}).call(this);
