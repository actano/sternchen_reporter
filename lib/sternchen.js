// Generated by CoffeeScript 1.7.1

/*
    custom actano reporter (derived from the mocha tap reporter)
 */

(function() {
  var Sternchen, basename, dirname, extname, fs, join, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('chai').Assertion.includeStack = true;

  fs = require('fs');

  if (typeof phantom !== "undefined" && phantom !== null) {
    join = function() {
      var args;
      args = Array.prototype.filter.call(arguments, function(elt) {
        return typeof elt === "string";
      });
      return args.join('/');
    };
    dirname = function(p) {
      var slice, split;
      if ((p == null) || typeof p !== "string") {
        return;
      }
      split = p.split('/');
      slice = split.slice(0, -1);
      if (slice.length === 0) {
        return '.';
      } else {
        return slice.join('/');
      }
    };
    basename = function(p, ext) {
      var base, split;
      if ((p == null) || typeof p !== "string") {
        return;
      }
      split = p.split('/');
      base = (split.slice(-1))[0];
      if ((ext != null) && base.slice(-1 * ext.length === ext)) {
        base = base.slice(0, -1 * ext.length);
      }
      return base;
    };
    extname = function(p) {
      var idx;
      if ((p == null) || typeof p !== "string") {
        return;
      }
      idx = p.lastIndexOf('.');
      if (idx <= 0) {
        return p;
      }
      return p.slice(idx);
    };
    path = {
      join: join,
      dirname: dirname,
      basename: basename,
      extname: extname
    };
    fs.openSync = fs.open;
  } else {
    path = require('path');
  }

  Sternchen = (function() {
    function Sternchen(runner) {
      this.runner = runner;
      this.startSuite = __bind(this.startSuite, this);
      this.endSuite = __bind(this.endSuite, this);
      this.n = 1;
      this.passes = 0;
      this.failures = 0;
      this.initalizeEvents();
    }

    Sternchen.prototype.write = function(str) {
      var buf;
      if (this.fd != null) {
        if (typeof phantom !== "undefined" && phantom !== null) {
          this.fd.write(str);
          return this.fd.flush();
        } else {
          buf = new Buffer(str);
          return fs.writeSync(this.fd, buf, 0, buf.length, null);
        }
      }
    };

    Sternchen.prototype.htmlEscape = function(str) {
      return String(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    };

    Sternchen.prototype.endSuite = function() {
      var duration, test, _i, _len, _ref, _ref1, _ref2;
      if (this.currentSuite != null) {
        duration = new Date - this.currentSuite.start;
        this.write('<testsuite');
        this.write(' name="' + this.htmlEscape(this.currentSuite.suite.fullTitle()) + '"');
        this.write(' tests="' + this.currentSuite.tests.length + '"');
        this.write(' failures="' + this.currentSuite.failures + '"');
        this.write(' skipped="' + (this.currentSuite.tests.length - this.currentSuite.failures - this.currentSuite.passes) + '"');
        this.write(' timestamp="' + this.currentSuite.start.toUTCString() + '"');
        this.write(' time="' + (duration / 1000) + '">\n');
        _ref = this.currentSuite.tests;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          test = _ref[_i];
          this.write('<testcase');
          this.write(' classname="' + this["package"] + '"');
          this.write(' name="' + this.htmlEscape(this.currentSuite.suite.title + '.' + test.title) + '"');
          if (!test.skipped) {
            this.write(' time="' + (test.duration / 1000) + '"');
          }
          if (test.state === "failed") {
            this.write('>\n');
            this.write('<failure message="');
            if (((_ref1 = test.err) != null ? _ref1.message : void 0) != null) {
              this.write(this.htmlEscape(test.err.message));
            } else {
              this.write('unknown error');
            }
            this.write('">\n');
            if (((_ref2 = test.err) != null ? _ref2.stack : void 0) != null) {
              this.write(this.htmlEscape(test.err.stack.replace(/^/gm, '  ')));
            }
            this.write('\n</failure>\n');
            this.write('</testcase>\n');
          } else {
            if (test.skipped) {
              this.write('>\n');
              this.write('<skipped/>\n');
              this.write('</testcase>\n');
            } else {
              this.write('/>\n');
            }
          }
        }
        return this.write('</testsuite>\n');
      }
    };

    Sternchen.prototype.startSuite = function(suite) {
      return this.currentSuite = {
        suite: suite,
        tests: [],
        start: new Date,
        failures: 0,
        passes: 0
      };
    };

    Sternchen.prototype.initalizeEvents = function() {
      this.runner.on('start', (function(_this) {
        return function() {
          var prefix, report_file, total;
          report_file = process.env.REPORT_FILE;
          if (report_file != null) {
            _this["package"] = path.join(path.dirname(report_file), path.basename(report_file, path.extname(report_file))).replace(/\//g, '.');
            prefix = process.env.PREFIX;
            if (prefix != null) {
              report_file = path.join(prefix, report_file);
            }
            _this.fd = fs.openSync(report_file, 'w');
            _this.write('<testsuites name="Mocha Tests">\n');
          }
          total = _this.runner.grepTotal(_this.runner.suite);
          return console.log('%d..%d', 1, total);
        };
      })(this));
      this.runner.on('test', (function(_this) {
        return function(test) {
          if (test.parent.fullTitle() !== _this.lastSuiteTitle) {
            _this.endSuite();
            _this.lastSuiteTitle = test.parent.fullTitle();
            return _this.startSuite(test.parent);
          }
        };
      })(this));
      this.runner.on('test end', (function(_this) {
        return function(test) {
          var _ref;
          if (((_ref = _this.currentSuite) != null ? _ref.tests : void 0) != null) {
            _this.currentSuite.tests.push(test);
          }
          return ++_this.n;
        };
      })(this));
      this.runner.on('pending', (function(_this) {
        return function(test) {
          test.skipped = true;
          return console.log('ok %d %s # SKIP -', _this.n, _this.title(test));
        };
      })(this));
      this.runner.on('pass', (function(_this) {
        return function(test) {
          _this.currentSuite.passes++;
          _this.passes++;
          return console.log('ok %d %s', _this.n, _this.title(test));
        };
      })(this));
      this.runner.on('fail', (function(_this) {
        return function(test, err) {
          test.err = err;
          if (_this.currentSuite != null) {
            _this.currentSuite.failures++;
          }
          _this.failures++;
          console.log('mocha not ok %d %s', _this.n, _this.title(test));
          if (err.stack) {
            return console.log(err.stack.replace(/^/gm, '  '));
          }
        };
      })(this));
      return this.runner.on('end', (function(_this) {
        return function() {
          _this.endSuite();
          _this.write('</testsuites>');
          if (typeof fd !== "undefined" && fd !== null) {
            fs.closeSync(fd);
          }
          console.log('# tests ' + (_this.passes + _this.failures));
          console.log('# pass ' + _this.passes);
          return console.log('# fail ' + _this.failures);
        };
      })(this));
    };

    Sternchen.prototype.title = function(test) {
      return test.parent.fullTitle() + " : " + test.title;
    };

    return Sternchen;

  })();

  module.exports = Sternchen;

}).call(this);
